version: '3.8'

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./server_admin.db
      - SECRET_KEY=your-secret-key-change-in-production
      - BACKEND_CORS_ORIGINS=http://localhost:4200,http://frontend:80
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=utility,compute
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
      - backend_data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock  # Para gerenciar Docker
      - /proc:/host/proc:ro  # Para monitoramento do sistema
      - /sys:/host/sys:ro    # Para informações do sistema
    networks:
      - server-admin-network
    restart: unless-stopped
    # Configuração para GPU NVIDIA (opcional)
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: 
      context: ./frontend/ubuntu-server-admin
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - API_URL=http://backend:8000
    networks:
      - server-admin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Opcional: Banco PostgreSQL para produção
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: server_admin
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - server-admin-network
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d server_admin"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Opcional: Redis para cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - server-admin-network
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server /usr/local/etc/redis/redis.conf

  # Nginx para produção (proxy reverso)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - server-admin-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  backend_data:
  postgres_data:
  redis_data:

networks:
  server-admin-network:
    driver: bridge
